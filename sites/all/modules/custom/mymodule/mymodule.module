<?php
/**
 * Module file for Mymodule.
 */

/**
 * Internal path to Paver Participant entities.
 */
define('PAVER_PARTICIPANT_ADMIN_URL', 'admin/structure/paver-participants');

/**
 * Implements hook_entity_info().
 */
function mymodule_entity_info() {

  $info = array();

  $info['paver_participant'] = array(
    'label' => t('Paver Participant'),
    'base table' => 'mymodule_paver_participant',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'module' => 'mymodule',
    'entity class' => 'PaverParticipantEntity',
    'controller class' => 'PaverParticipantEntityController',
    'views controller class' => 'PaverParticipantViewsController',
    'access callback' => 'pavers_access_callback',
    'fieldable' => TRUE,
    'bundles' => array(
      'paver_participant' => array(
        'label' => t('Paver Participant'),
        'admin' => array(
          'path' => PAVER_PARTICIPANT_ADMIN_URL,
        ),
      ),
    ),
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => PAVER_PARTICIPANT_ADMIN_URL,
      'controller class' => 'EntityDefaultUIController',
    ),
    'view modes' => array(
      'paver_geolocator' => array(
        'label' => t('GeoLocator'),
        'custom settings' => TRUE,
      ),
    ),
  );

  $info['paver'] = array(
    'label' => t('Paver'),
    'base table' => 'mymodule_paver', // Must match hook_schema
    'entity keys' => array(
      'id' => 'id',
      'label' => 'style', // 'Label' in the generic drupal sense
    ),
    'module' => 'mymodule',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'access callback' => 'pavers_access_callback', // Required in order to define who can see the entity content.
  );
  return $info;
}

/**
 * Implements hook_theme_registry_alter().
 */
function mymodule_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'mymodule');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Adds our theme specifications to the Theme Registry.
 */
function mymodule_event_theme($existing, $type, $theme, $path) {
  return array(
    'paver' => array(
      'variables' => array('element' => NULL),
      'template' => 'paver-participant',
      'path' => drupal_get_path('module', 'mymodule') . '/theme',
    ),
  );
}

/**
 * Form definition for adding / editing a project.
 */
function paver_participant_form($form, &$form_state, $participant = NULL) {
  $form['name'] = array(
    '#title' => t('Participant name'),
    '#type' => 'textfield',
    '#default_value' => isset($participant->name) ? $participant->name : '',
    '#required' => TRUE,
  );

  field_attach_form('paver_participant', $participant, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($participant->id) ? t('Update participant') : t('Save participant'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the project add/edit form.
 */
function paver_participant_form_submit($form, &$form_state) {
  $participant = entity_ui_form_submit_build_entity($form, $form_state);
  $participant->save();
  drupal_set_message(t('The participant: @name has been saved.', array('@name' => $participant->name)));
  $form_state['redirect'] = 'admin/paver-participants';
}

/**
 * Implements hook_menu().
 */
function mymodule_menu() {
  $items = array();

  $items['paver-participant/%'] = array(
    'title' => 'Paver Participant',
    'page callback' => '_paver_participant_view_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Page callback for displaying individual paver participants.
 */
function _paver_participant_view_page($id) {
  if ($participant = entity_load('paver_participant', array($id))) {
    $participant = $participant[$id];
    drupal_set_title($participant->name);
    // View data is defined in buildContent().
    $output = entity_view('paver_participant', array($participant));
    return $output;
  }
  return MENU_NOT_FOUND;
}

function pavers_access_callback() {
  return TRUE;
}

/**
 * Implements hook_entity_property_info().
 *
 * The below definitions tell the Entity API how to interact
 * with the database columns.
 */
function mymodule_entity_property_info() {

  $info = array();

  $info['paver_participant']['properties']['id'] = array(
    'label' => t('Event ID'),
    'description' => t('The system ID of the event.'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  $info['paver_participant']['properties']['name'] = array(
    'label' => t('Participant Name'),
    'description' => t('The participant'),
    'type' => 'text',
    'schema field' => 'name',
    'setter callback' => 'entity_property_verbatim_set',
  );

  $info['paver']['properties']['id'] = array(
    'label' => t('Event ID'),
    'description' => t('The system ID of the event.'),
    'type' => 'integer', // Note that the type 'integer' not 'int'
    'schema field' => 'id',
  );
  $info['paver']['properties']['style'] = array(
    'label' => t('Paver Style'),
    'description' => t('The type of paver'),
    'type' => 'text',
    'schema field' => 'style', // corresponds to column name
    'setter callback' => 'entity_property_verbatim_set', // the default entity setter
  );
  $info['paver']['properties']['price'] = array(
    'label' => t('Price'),
    'description' => t('The regular price'),
    'type' => 'integer',
    'schema field' => 'price',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['paver']['properties']['discount_price'] = array(
    'label' => t('Discount Price'),
    'description' => t('The discount price'),
    'type' => 'integer',
    'schema field' => 'discount_price',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['paver']['properties']['width'] = array(
    'label' => t('Width'),
    'description' => t('Width (in inches)'),
    'type' => 'integer',
    'schema field' => 'width',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['paver']['properties']['height'] = array(
    'label' => t('Height'),
    'description' => t('Height (in inches)'),
    'type' => 'integer',
    'schema field' => 'height',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['paver']['properties']['lines_of_text'] = array(
    'label' => t('Lines of Text'),
    'description' => t('Numeric value of lines'),
    'type' => 'integer',
    'schema field' => 'lines_of_text',
    'setter callback' => 'entity_property_verbatim_set',
  );

  return $info;
}

/**
 * Custom function to save entities to the database.
 */
function _mymodule_add_content() {
  $pavers[] = array(
    'style' => 'Burnt Orange',
    'price' => 250,
    'discount_price' => 200,
    'width' => 8,
    'height' => 4,
    'lines_of_text' => 3,
    );
  $pavers[] = array(
    'style' => 'Bronze',
    'price' => '500',
    'discount_price' => '400',
    'width' => '8',
    'height' => '8',
    'lines_of_text' => '5',
    );
  $pavers[] = array(
    'style' => 'Silver (Brick & Plaque)',
    'price' => '1000',
    'discount_price' => NULL,
    'width' => '8',
    'height' => '8',
    'lines_of_text' => '5',
    );

  $entity_type = 'paver';
  foreach ($pavers as $id => $values) {
    $e = entity_create($entity_type, array('type' => $entity_type));
    $ew = entity_metadata_wrapper($entity_type, $e);
    foreach ($values as $key => $value) {
      $ew->{$key}->set($value);
    }
    $ew->save();
  }
}
