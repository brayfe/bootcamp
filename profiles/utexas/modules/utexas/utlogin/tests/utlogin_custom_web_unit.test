<?php

class UtloginWebUnitTest extends UtloginWebTestBase {

  /**
   * Provides a description of the tests to be shown on the Testing page.
   */
  public static function getInfo() {
    return array(
      'name' => 'UTLogin - Custom Web Unit Tests',
      'description' => 'A suite of web unit tests.',
      'group' => 'UTLogin',
    );
  }

  /**
   * Sets up each test case independently.
   */
  public function setUp() {
    parent::setUp();
  }

  /**
   * Performs tests to show behavior of utlogin_check_user_with_name_exists().
   */
  public function testUtloginCheckUserWithNameExists() {
    // Generate a random name for the following tests.
    $test_user_name = $this->randomName();

    // Assert a user does not already exist with the generated random name as
    // their name.
    $result = (bool) user_load_by_name($test_user_name);
    $message = format_string('User %name is not in the system by default.', array('%name' => $test_user_name));
    $this->assertFalse($result, $message);

    // Assert utlogin_check_user_with_name_exists() returns FALSE for an unused
    // name.
    $result = utlogin_check_user_with_name_exists($test_user_name);
    $message = format_string('utlogin_check_user_with_name_exists() returns FALSE for user %name.', array('%name' => $test_user_name));
    $this->assertFalse($result, $message);

    // Create a user with the generated random name as their name.
    user_save(drupal_anonymous_user(), array('name' => $test_user_name));

    // Assert the generated random name is now in use.
    $result = (bool) user_load_by_name($test_user_name);
    $message = format_string('User %name is in the system.', array('%name' => $test_user_name));
    $this->assertTrue($result, $message);

    // Assert utlogin_check_user_with_name_exists() returns TRUE for a used name.
    $result = utlogin_check_user_with_name_exists($test_user_name);
    $message = format_string('utlogin_check_user_with_name_exists() returns TRUE for user %name.', array('%name' => $test_user_name));
    $this->assertTrue($result, $message);
  }

  /**
   * Performs tests to show behavior of utlogin_check_utlogin_authmap_exists().
   */
  public function testUtloginCheckUtloginAuthmapExist() {
    // Generate a random name for the following tests.
    $test_user_name = $this->randomName();

    // Assert an authmap record for the generated random name does not already
    // exist.
    $result = (bool) db_query_range('SELECT 1 FROM {authmap} WHERE module = :module AND authname = :name', 0, 1, array(':module' => 'utlogin', ':name' => $test_user_name))->fetchField();
    $message = format_string('Authmap record for %name is not in the system by default.', array('%name' => $test_user_name));
    $this->assertFalse($result, $message);

    // Assert utlogin_check_utlogin_authmap_exists() returns FALSE for an
    // authmap record that is not present.
    $result = utlogin_check_utlogin_authmap_exists($test_user_name);
    $message = format_string('utlogin_check_utlogin_authmap_exists() returns FALSE for non-existent user %name.', array('%name' => $test_user_name));
    $this->assertFalse($result, $message);

    // Create a user with the generated random name as their name.
    // Note: utlogin_user_insert() will automatically convert the new user to be
    // a UTLogin user (has a utlogin authmap record) with a random password.
    $test_user = user_save(drupal_anonymous_user(), array('name' => $test_user_name));

    // Assert utlogin_check_utlogin_authmap_exists() returns TRUE for an authmap
    // record that is present.
    $result = utlogin_check_utlogin_authmap_exists($test_user_name);
    $message = format_string('utlogin_check_utlogin_authmap_exists() returns TRUE for UTLogin user %name.', array('%name' => $test_user_name));
    $this->assertTrue($result, $message);

    // Remove the user's utlogin authmap record.
    user_set_authmaps($test_user, array('authname_utlogin' => NULL));

    // Assert utlogin_check_utlogin_authmap_exists() returns FALSE for an
    // authmap record that is not present.
    $result = utlogin_check_utlogin_authmap_exists($test_user_name);
    $message = format_string('utlogin_check_utlogin_authmap_exists() returns FALSE for non-UTLogin user %name.', array('%name' => $test_user_name));
    $this->assertFalse($result, $message);
  }

  /**
   * Performs tests to show behavior of utlogin_get_default_logout_destination().
   */
  public function testUtloginGetDefaultLogoutDestination() {
    // Assert the variable utlogin_logout_goto is '<front>'.
    variable_set('utlogin_logout_goto', '<front>');
    $utlogin_logout_goto = variable_get('utlogin_logout_goto');
    $this->assertEqual($utlogin_logout_goto, '<front>');

    // Assert utlogin_get_default_logout_destination() returns an absolute URL.
    $logout_destination = utlogin_get_default_logout_destination();
    $message = 'utlogin_get_default_logout_destination() returns an absolute URL to the location specified by utlogin_logout_goto.';
    $this->assertEqual($logout_destination, url($utlogin_logout_goto, array('absolute' => TRUE)), $message);
  }

  /**
   * Performs tests to show behavior of utlogin_update_user_attributes().
   */
  public function testUtloginUpdateUserAttributes() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      // Set up a test UTLogin user.
      $drupal_user = user_save(drupal_anonymous_user(), array('name' => $this->utlogin_users[$utlogin_user_key]['name'], 'status' => 1));

      // Assert the test user's mail field is empty.
      $result = empty($drupal_user->mail);
      $message = format_string('User %name\'s mail field is empty.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      // Assert the test user is automatically logged in.
      $this->drupalGet('');
      $drupal_user = user_load($drupal_user->uid, TRUE);
      $message = format_string('User %name is logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Logged in as: @username', array('@username' => $this->utlogin_users[$utlogin_user_key]['name'])), $message);

      // Assert the test user's mail field is populated.
      $result = !empty($drupal_user->mail);
      $message = format_string('User %name\'s mail field is not empty.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);

      // Set the test user's mail field to be empty again.
      user_save($drupal_user, array('mail' => NULL));

      // Assert the test user's mail field is empty.
      $drupal_user = user_load($drupal_user->uid, TRUE);
      $result = empty($drupal_user->mail);
      $message = format_string('User %name\'s mail field is empty.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);

      // Assert the presence of the skip parameter prevents login.
      $this->drupalGet('', array('query' => array(UTLOGIN_SKIP_PARAMETER => '')));
      $drupal_user = user_load($drupal_user->uid, TRUE);
      $message = format_string('User %name is not logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Log in with UT EID'), $message);

      // Assert the presence of the skip parameter prevents the mail field from
      // being populated.
      $result = empty($drupal_user->mail);
      $message = format_string('User %name\'s mail field is empty.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show behavior of UtloginWebTestBase::utloginLogin().
   */
  public function testUtloginLogin() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $cookie_value = $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);
      $message = format_string('Authenticated with the UTLogin servers using EID %name.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertNotNull($cookie_value, $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show behavior of UtloginWebTestBase::utloginLogout().
   */
  public function testUtloginLogout() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      variable_set('utlogin_auto_register', TRUE);

      $empty_cookies = empty($this->utlogin_users[$utlogin_user_key]['cookies']);
      $message = format_string('UTLogin user %name has no cookies (no UTLogin cookie).', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($empty_cookies, $message);

      $code = $this->utloginLogout($this->utlogin_users[$utlogin_user_key]);
      $result = $code == 200;
      $message = 'Calling utloginLogout without a valid UTLogin cookie results in a 200 status code.';
      $this->assertTrue($result, $message);

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      $this->drupalGet('');
      $message = format_string('User %name is logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Logged in as: @username', array('@username' => $this->utlogin_users[$utlogin_user_key]['name'])), $message);

      $code = $this->utloginLogout($this->utlogin_users[$utlogin_user_key]);
      $result = $code == 200;
      $message = format_string('Calling utloginLogout with a valid UTLogin cookie (for user %name) results in a 200 status code.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);

      // Delay the next step to allow time for the UTLogin logout signal to reach
      // the server and be processed.
      sleep(1);
      $this->drupalGet('');
      $message = format_string('User %name is not logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Log in with UT EID'), $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show behavior concerning auto-registration.
   */
  public function testAutoRegister() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      // Confirm auto-registration is disabled by default.
      $auto_register = variable_get('utlogin_auto_register', FALSE);
      $this->assertFalse($auto_register, 'utlogin_auto_register defaults to FALSE.');

      $user_exists = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name does not exist by default.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse($user_exists, $message);

      $this->drupalGet('');
      $user_exists = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name is not in the system.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse($user_exists, $message);
      $this->assertText(t('Automatic user account creation is currently disabled.'));

      variable_set('utlogin_auto_register', TRUE);
      $this->drupalGet('');
      $user_exists = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name is in the system.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($user_exists, $message);

      $user_authmaps = user_get_authmaps($this->utlogin_users[$utlogin_user_key]['name']);
      $has_utlogin_authmap = array_key_exists('utlogin', $user_authmaps);
      $message = format_string('User %name has an authmap record with module "utlogin".', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($has_utlogin_authmap, $message);

      $user_password = db_query('SELECT pass FROM {users} WHERE name = :name', array(':name' => $this->utlogin_users[$utlogin_user_key]['name']))->fetchField();
      $message = format_string('User %name\'s pass field is not empty.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse(empty($user_password), $message);

      $message = format_string('User %name is logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Logged in as: @username', array('@username' => $this->utlogin_users[$utlogin_user_key]['name'])), $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show behavior concerning the skip parameter.
   */
  public function testSkipParameter() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      $drupal_user = user_save(drupal_anonymous_user(), array('name' => $this->utlogin_users[$utlogin_user_key]['name'], 'status' => 1));

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      $this->drupalGet('', array('query' => array(UTLOGIN_SKIP_PARAMETER => 1)));
      $message = format_string('User %name is not logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Log in with UT EID'), $message);

      $this->drupalGet('');
      $message = format_string('User %name is logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Logged in as: @username', array('@username' => $this->utlogin_users[$utlogin_user_key]['name'])), $message);

      $this->drupalGet('', array('query' => array(UTLOGIN_SKIP_PARAMETER => 1)));
      $message = format_string('User %name is not logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Log in with UT EID'), $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show behavior of utlogin_user_insert().
   */
  public function testUtloginUserInsert() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      // Create a new user.
      user_save(drupal_anonymous_user(), array('name' => $this->utlogin_users[$utlogin_user_key]['name'], 'status' => 1));

      // Assert the newly-created user has an associated utlogin authmap record.
      $user_authmaps = user_get_authmaps($this->utlogin_users[$utlogin_user_key]['name']);
      $has_utlogin_authmap = array_key_exists('utlogin', $user_authmaps);
      $message = format_string('User %name has an authmap record with module "utlogin".', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($has_utlogin_authmap, $message);

      // Assert the newly-created user's password field is not empty.
      $user_password = db_query('SELECT pass FROM {users} WHERE name = :name', array(':name' => $this->utlogin_users[$utlogin_user_key]['name']))->fetchField();
      $message = format_string('User %name\'s pass field is not empty.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse(empty($user_password), $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }
}
