<?php

class FunctionalDrupalUserCreationTest extends UtloginWebTestBase {

  /**
   * Provides a description of the tests to be shown on the Testing page.
   */
  public static function getInfo() {
    return array(
      'name' => 'UTLogin - Functional tests for Drupal user creation',
      'description' => 'A suite of tests to cover the defined functional tests in DFP Test Cases 3.4 and 3.5.',
      'group' => 'UTLogin',
    );
  }

  /**
   * Sets up each test case independently.
   */
  public function setUp() {
    parent::setUp();
  }

  /**
   * Performs tests to show system behavior with auto-registration enabled.
   *
   * Implementation is based on DFP Test Cases 3.4.1.
   */
  public function testAutoRegistrationEnabled_1() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      variable_set('utlogin_auto_register', TRUE);

      // Assert the webuser does not already have an account.
      $result = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name does not exist.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse($result, $message);
      $num_users_before = db_query("SELECT count(uid) FROM {users}")->fetchField();

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      // Assert an account was automatically created for the webuser.
      $this->curlClose();
      $this->drupalGet('user/utlogin/login');
      $result = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name exists.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);
      $num_users_after = db_query("SELECT count(uid) FROM {users}")->fetchField();

      // Assert only one user account was added.
      $result = ($num_users_before + 1) == $num_users_after;
      $message = format_string('The number of user accounts before (@before) is less than the number of user accounts after (@after) by one.', array('@before' => $num_users_before, '@after' => $num_users_after));
      $this->assertTrue($result, $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show system behavior with auto-registration enabled.
   *
   * Implementation is based on DFP Test Cases 3.4.2.
   */
  public function testAutoRegistrationEnabled_2() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      variable_set('utlogin_auto_register', TRUE);
      $drupal_user = user_save(drupal_anonymous_user(), array('name' => $this->utlogin_users[$utlogin_user_key]['name'], 'status' => 1));

      // Assert the webuser already has an account.
      $result = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name exists.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);
      $num_users_before = db_query("SELECT count(uid) FROM {users}")->fetchField();

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      // Assert the webuser's account still exists.
      $this->curlClose();
      $this->drupalGet('user/utlogin/login');
      $result = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name exists.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertTrue($result, $message);
      $num_users_after = db_query("SELECT count(uid) FROM {users}")->fetchField();

      // Assert the number of user accounts did not change.
      $result = $num_users_before === $num_users_after;
      $message = format_string('The number of user accounts before (@before) is equal to the number of user accounts after (@after).', array('@before' => $num_users_before, '@after' => $num_users_after));
      $this->assertTrue($result, $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }

  /**
   * Performs tests to show system behavior with auto-registration disabled.
   *
   * Implementation is based on DFP Test Cases 3.5.1.
   */
  public function testAutoRegistrationDisabled() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      variable_set('utlogin_auto_register', FALSE);

      // Assert the webuser does not already have an account.
      $result = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name does not exist.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse($result, $message);
      $num_users_before = db_query("SELECT count(uid) FROM {users}")->fetchField();

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      // Assert an account was automatically created for the webuser.
      $this->curlClose();
      $this->drupalGet('user/utlogin/login');
      $result = utlogin_check_user_with_name_exists($this->utlogin_users[$utlogin_user_key]['name']);
      $message = format_string('User %name does not exist.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertFalse($result, $message);
      $num_users_after = db_query("SELECT count(uid) FROM {users}")->fetchField();

      // Assert the number of user accounts did not change.
      $result = $num_users_before === $num_users_after;
      $message = format_string('The number of user accounts before (@before) is equal to the number of user accounts after (@after).', array('@before' => $num_users_before, '@after' => $num_users_after));
      $this->assertTrue($result, $message);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }
}
