<?php

class FunctionalUser1Test extends UtloginWebTestBase {

  /**
   * Provides a description of the tests to be shown on the Testing page.
   */
  public static function getInfo() {
    return array(
      'name' => 'UTLogin - Functional tests for user1',
      'description' => 'A suite of tests to cover the defined functional tests in DFP Test Cases 3.7.',
      'group' => 'UTLogin',
    );
  }

  /**
   * Sets up each test case independently.
   */
  public function setUp() {
    parent::setUp();
    $this->setUser1();

    // The following is an excerpt from the User module's user.test file.

    // Enable user pictures.
    variable_set('user_pictures', 1);

    // Test if directories specified in settings exist in filesystem.
    $file_dir = 'public://';
    $file_check = file_prepare_directory($file_dir, FILE_CREATE_DIRECTORY);

    $picture_dir = variable_get('user_picture_path', 'pictures');
    $picture_path = $file_dir . $picture_dir;

    $pic_check = file_prepare_directory($picture_path, FILE_CREATE_DIRECTORY);
    $this->_directory_test = is_writable($picture_path);
    $this->assertTrue($this->_directory_test, "The directory $picture_path doesn't exist or is not writeable. Further tests will not be made.");
  }

  /**
   * Performs tests to show user1 can log in locally.
   *
   * Implementation is based on DFP Test Cases 3.7.1.
   */
  public function testUser1DrupalLogin() {
    $edit = array();
    $edit['name'] = $this->user1->name;
    $edit['pass'] = $this->user1->pass_raw;
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('Log out'));
  }

  /**
   * Performs tests to show a non-user1 user cannot log in locally.
   *
   * Implementation is based on DFP Test Cases 3.7.2.
   */
  public function testNonUser1DrupalLogin() {
    $non_user1_user = $this->drupalCreateUser();
    $message = format_string('UID of created user %name is not 1.', array('%name' => $non_user1_user->name));
    $this->assertNotEqual($non_user1_user->uid, 1, $message);

    $edit = array();
    $edit['name'] = $non_user1_user->name;
    $edit['pass'] = $non_user1_user->pass_raw;
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertNoText(t('Log out'));
  }

  /**
   * Performs tests to show behavior of form fields on user1's profile.
   *
   * Implementation is based on DFP Test Cases 3.7.3.
   *
   * The implementation for picture upload testing is based on code from the
   * User module's user.test file.
   *
   * @see UserPictureTestCase::testPictureIsValid()
   * @see UserPictureTestCase::saveUserPicture()
   */
  public function testUser1EditProfile() {
    $this->drupalLogin($this->user1);

    $edit_path = format_string('user/1/edit');
    $this->drupalGet($edit_path);

    // Assert the name field's value is user1's name.
    $message = format_string('Name field\'s value is @name.', array('@name' => $this->user1->name));
    $this->assertFieldByName('name', $this->user1->name, $message);

    // Assert the name field is editable.
    $new_name = $this->randomName();
    $form_values = array(
      'name' => $new_name,
    );
    $this->drupalPost($edit_path, $form_values, t('Save'));
    $pass_raw = $this->user1->pass_raw;
    $this->user1 = user_load(1, TRUE);
    $this->user1->pass_raw = $pass_raw;
    $this->assertText(t('The changes have been saved.'));
    $this->assertEqual($this->user1->name, $new_name);

    // Assert the mail field is editable.
    $form_values = array(
      'mail' => $new_name . '@example.com',
      'current_pass' => $this->user1->pass_raw,
    );
    $this->drupalPost($edit_path, $form_values, t('Save'));
    $pass_raw = $this->user1->pass_raw;
    $this->user1 = user_load(1, TRUE);
    $this->user1->pass_raw = $pass_raw;
    $this->assertText(t('The changes have been saved.'));
    $this->assertEqual($this->user1->mail, $new_name . '@example.com');

    // Assert the password elements are present.
    $message = 'Current password field is present.';
    $this->assertFieldByName('current_pass', NULL, $message);
    $message = 'New password field is present.';
    $this->assertFieldByName('pass[pass1]', NULL, $message);
    $message = 'Confirm new password field is present.';
    $this->assertFieldByName('pass[pass2]', NULL, $message);
    $message = 'Password reset link is present.';
    $this->assertLink(t('Request new password'), 0, $message);

    // Assert the password is changeable.
    $new_pass_raw = user_password();
    $form_values = array(
      'pass[pass1]' => $new_pass_raw,
      'pass[pass2]' => $new_pass_raw,
      'current_pass' => $this->user1->pass_raw,
    );
    $this->drupalPost($edit_path, $form_values, t('Save'));
    $this->user1 = user_load(1, TRUE);
    $this->user1->pass_raw = $new_pass_raw;
    $this->assertText(t('The changes have been saved.'));

    // Assert the status field is editable.
    $form_values = array(
      'status' => 0,
    );
    $this->drupalPost($edit_path, $form_values, t('Save'));
    $this->assertText(t('The changes have been saved.'));
    user_save($this->user1, array('status' => 1));
    $this->drupalLogin($this->user1);

    // Assert the timezone field is editable.
    $form_values = array(
      'timezone' => 'America/Chihuahua',
    );
    $this->drupalPost($edit_path, $form_values, t('Save'));
    $this->assertText(t('The changes have been saved.'));

    // The following is based on code from the User module's user.test file.

    // Assert the picture field is editable.
    if ($this->_directory_test) {
      $image = current($this->drupalGetTestFiles('image'));
      $info = image_get_info($image->uri);

      // Set new variables: valid dimensions, valid filesize (0 = no limit).
      $test_dim = ($info['width'] + 10) . 'x' . ($info['height'] + 10);
      variable_set('user_picture_dimensions', $test_dim);
      variable_set('user_picture_file_size', 0);

      $form_values = array(
        'files[picture_upload]' => drupal_realpath($image->uri)
      );
      $this->drupalPost($edit_path, $form_values, t('Save'));

      // Load actual user data from database.
      $this->user1 = user_load(1, TRUE);
      $pic_path = isset($this->user1->picture) ? $this->user1->picture->uri : NULL;

      // Check if image is displayed in user's profile page.
      $this->drupalGet('user/1');
      $this->assertRaw(file_uri_target($pic_path), "Image is displayed on user's profile page");

      // Check if file is located in proper directory.
      $this->assertTrue(is_file($pic_path), 'File is located in proper directory');

      // Set new picture dimensions.
      $test_dim = ($info['width'] + 5) . 'x' . ($info['height'] + 5);
      variable_set('user_picture_dimensions', $test_dim);

      $form_values = array(
        'files[picture_upload]' => drupal_realpath($image->uri)
      );
      $this->drupalPost($edit_path, $form_values, t('Save'));

      // Load actual user data from database.
      $this->user1 = user_load(1, TRUE);
      $pic_path2 = isset($this->user1->picture) ? $this->user1->picture->uri : NULL;

      $this->assertNotEqual($pic_path, $pic_path2, 'Filename of second picture is different.');
    }
  }

  /**
   * Performs tests to show user1 can access the password reset resources.
   *
   * Implementation is based on DFP Test Cases 3.7.4.
   */
  public function testUser1PasswordReset() {
    global $base_url;

    $this->drupalLogin($this->user1);
    $this->drupalGet('user/password');

    $this->drupalPost('user/password', array(), t('E-mail new password'));
    $this->assertText(t('Further instructions have been sent to your e-mail address.'));

    // Retrieve the reset link from the sent e-mail.
    $emails = $this->drupalGetMails();
    $email = $emails[0];
    $email_lines = explode("\n", $email['body']);
    $reset_link = '';
    foreach ($email_lines as $email_line) {
      if (strpos($email_line, $base_url) !== FALSE) {
        $reset_link = $email_line;
        break;
      }
    }

    // Assert the reset link for user1 can be used.
    $this->drupalLogout();
    $this->drupalGet($reset_link);
    $this->assertResponse(200);
  }

  /**
   * Performs tests to show a non-user1 authenticated user cannot access the password reset resources.
   *
   * Implementation is based on DFP Test Cases 3.7.5.
   */
  public function testNonUser1PasswordReset() {
    $utlogin_user_key = 'portalb';
    if (array_key_exists($utlogin_user_key, $this->utlogin_users)) {
      // Assert an anonymous user can access user/password.
      $this->drupalGet('user/password');
      $this->assertResponse(200);

      // Assert an anonymous user can request a password reset for user1.
      $this->setUser1();
      $form_values = array('name' => $this->user1->name);
      $this->drupalPost('user/password', $form_values, t('E-mail new password'));
      $this->assertText(t('Further instructions have been sent to your e-mail address.'));

      $drupal_user = user_save(drupal_anonymous_user(), array('name' => $this->utlogin_users[$utlogin_user_key]['name'], 'status' => 1));

      // Add the UTLogin cookie to requests to emulate a UTLogin webuser.
      $this->utloginLogin($this->utlogin_users[$utlogin_user_key]);
      $this->additionalCurlOptions[CURLOPT_COOKIE] = UTLOGIN_COOKIE_NAME . '=' . $this->getUtloginCookieValue($this->utlogin_users[$utlogin_user_key]);

      // Assert a logged-in non-user1 user receives a 403 response for
      // user/password.
      $this->drupalGet('user/login');
      $this->drupalGet('user/password');
      $message = format_string('User %name is logged in.', array('%name' => $this->utlogin_users[$utlogin_user_key]['name']));
      $this->assertText(t('Logged in as: @username', array('@username' => $this->utlogin_users[$utlogin_user_key]['name'])), $message);
      $this->assertResponse(403);

      // Assert a reset link for a non-user1 account is denied.
      $this->drupalLogout();
      $this->additionalCurlOptions[CURLOPT_COOKIE] = '';
      $account = $this->drupalCreateUser();
      $account->login = REQUEST_TIME;
      $pw_hash = user_pass_rehash($account->pass, REQUEST_TIME, $account->login);
      $reset_link = url(format_string('user/reset/@uid/@timestamp/@pw_hash', array('@uid' => $account->uid, '@timestamp' => $account->login, '@pw_hash' => $pw_hash)), array('absolute' => TRUE));
      $this->drupalGet($reset_link);
      $this->assertResponse(403);
    }
    else {
      $message = format_string('UTLogin user specified by key %key does not exist (ensure utlogin_simpletest_utlogin_users is set properly in file @path). Halting subsequent tests.', array('%key' => $utlogin_user_key, '@path' => $this->utlogin_users_file_path));
      $this->fail($message);
    }
  }
}
